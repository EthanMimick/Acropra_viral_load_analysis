library(tidyverse)
library(vegan)
library(pairwiseAdonis)

setwd("~/Classes/Grad/MBE 649/Final Project Data/Acropora data")

df = read.csv("shortail.txt", sep="\t")
meta = read.csv("metadata.csv")

max_data = left_join(df, meta)


ggplot(max_data, aes(fill=taxon_name, y=percent_reads, x=run)) + 
  geom_bar(position="stack", stat="identity")


max_data = subset(max_data, read_number > 100 
                  & taxon_name !="Viruses"
                  & taxon_name !="cannot be assigned to a (non-viral) species"
                  & taxon_name !="belong to a (non-viral) species with less than 0.5% of all reads"
                  & taxon_name != "unclassified" )


ggplot(max_data, aes(fill=taxon_name, y=percent_reads, x=run)) + 
  geom_bar(position="stack", stat="identity")+
  facet_wrap(~Organism,scales = "free")

#start from here: 
df = read.csv("longtail.txt", sep="\t")
meta = read.csv("metadata.csv")


#need to spread identification data 
#only use the columns you care about
mini_data = df[c(1,2,5)]
wide_data = mini_data %>% spread(taxon_name, percent_reads)

new_df = left_join(wide_data, meta)

write.csv(t(new_df), "new_df.csv")

#you need to only select the microbiome data (so just removing the first row)
#then you need to take out all of the na and replace them with zeros
div = wide_data[2:335]
div = div %>% replace(is.na(.), 0)

#select only the metadata from the data that is for the new dataframe
env = new_df[c(336:346)]

colnames(env)

#if you want to to standardize your data 
div_rel = decostand(div, method = "normal")
div_rel = div_rel %>% replace(is.na(.), 0)

# computes dissimilarity indices
div_distmat = vegdist(div, method = "bray", na.rm=TRUE)
div_distmat = div_distmat %>% replace(is.na(.), 0)

div_NMS = metaMDS(div_distmat,
                  distance = "bray",
                  k = 3,
                  maxit = 999, 
                  trymax = 500,
                  wascores = TRUE)
#get a batic plot
plot(div_NMS, "sites")
goodness(div_NMS)

#find the environmental parameters
en = envfit(div_NMS, env, na.rm = TRUE)
#Goodness of fit:
#  r2 Pr(>r)  
#tech      0.0032  0.982  
#treatment 0.0895  0.309  
#coral     0.3818  0.044 *


#extract NMDS scores (x and y coordinates)
data.scores = as.data.frame(scores(div_NMS))

#add metadata
data.scores = cbind(data.scores, meta)



linecolors <- c("#714C02", "#01587A", "#024E37")
fillcolors <- c("#9D6C06", "#077DAA", "#026D4E")

#should work, change shape and color parameters

pdf("Rplot_NMDS.pdf")
ggplot(data.scores, aes(x = NMDS1, y = NMDS2)) +  geom_point(size = 4, aes( shape = Organism, colour = geo_loc_name))

dev.off()

#doesn't count as stats, but to add those circles
ggplot(data=data.scores) + 
  stat_ellipse(aes(x=NMDS1,y=NMDS2,colour=Organism),level = 0.80) +
  geom_point(aes(x=NMDS1,y=NMDS2,shape=geo_loc_name,colour=Organism),size=4) + 
  theme_bw()

#do an adonis
Organism = meta$Organism
adon.results= adonis2(div ~ env$geo_loc_name, method="bray",perm=999, na.rm=TRUE)

pairwise.adonis(div, Organism, sim.method = "euclidean",
                p.adjust.m = "bonferroni")

summary(adon.results)




#converting files to make phyloseq object
#open new_df.csv in excel copy the species line to a new csv called ASV_Taxonomy.csv
#in both .csv files add a new column called run to the beginning of the data and put ASV# into each by typing ASV1 and then double clicking the bottom right corner.
#save both .csv files for use in phyloseq analysis.
library(tidyverse) ; packageVersion("tidyverse") # 1.3.2
library(phyloseq) ; packageVersion("phyloseq") # 1.42.0
library(vegan) ; packageVersion("vegan") # 2.6.4
library(dendextend) ; packageVersion("dendextend") # 1.16.0
library(viridis) ; packageVersion("viridis") # 0.6.2
library("pairwiseAdonis"); packageVersion("pairwiseAdonis") # 0.4
library(ggpubr)
library(ANCOMBC)
library(microbiome)
library(eulerr)

#uploading your taxonomy and count data
asv_tab = read.delim("new_df.csv", sep = ",")
asv_tax = read.delim("ASV_Taxonmy.csv", sep=",")

#need to construct around your data using your metadata table from Run Selector
sample_info_tab = read.csv("metadata.csv") #had to clean metadata so the row.names could be read

#need to make columns the rownames all of them
#need to figure out what the row names are for all your data, likely if you followed the tutorial the tax and tab are "X")
#for your sample data file the first row needs to be the SRR that is listed in your ASV files
asv_tab = asv_tab %>% tibble::column_to_rownames("run")
asv_tax = asv_tax %>% tibble::column_to_rownames("run")
sample_df = sample_info_tab %>% tibble::column_to_rownames("run")
asv_tab = asv_tab %>% replace(is.na(.), 0)

#transforming your taxonomy data into a matrix for entry into phyloseq
asv_mat = as.matrix(asv_tab)
tax_mat = as.matrix(asv_tax)


#transform into phyloseq objects
asv = otu_table(asv_mat, taxa_are_rows=TRUE)
tax= tax_table(tax_mat)
samples=sample_data(sample_df)


#make a phyloseq object
phy <-phyloseq(asv, tax, samples)

#make sure it is full of the things you want in it 
nsamples(phy)
sample_variables(phy)
#relative abundance
phy_phylum = tax_glom(phy, taxrank = "name",NArm=FALSE)
rel_abund_phylum = phyloseq::transform_sample_counts(phy_phylum,
                                                     function(x){x / sum(x)})
Phylun_bar <- phyloseq::plot_bar(rel_abund_phylum, fill = "name")+
  geom_bar(aes(color = name, fill = name), stat = "identity", position = "stack", color = "black") +
  labs(x = "", y = "Relative Abundance\n") +
  facet_wrap(~ Organism , scales = "free") +
  theme(panel.background = element_blank()) +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        legend.text = element_text(size = 7),
        legend.title = element_text(size = 12))
#make a pcoa to evaluate each factor
phy_clr = microbiome::transform(phy, 'clr')
phy_ord = ordinate(phy_clr, "RDA", "euclidean")
plot_ordination(phy,phy_ord, type = 'samples', color='Organism', shape='geo_loc_name')

#Test whether the seasons differ significantly from each other using the permutational ANOVA 
dist.uf = phyloseq::distance(phy_clr, method = "euclidean")
pwa_Org <- pairwise.adonis(t(otu_table(phy_clr)), sample_data(phy_clr)$Organism, sim.method = "euclidean",
                p.adjust.m = "bonferroni")
pwa_Loc <- pairwise.adonis(t(otu_table(phy_clr)), sample_data(phy_clr)$geo_loc_name, sim.method = "euclidean",
                p.adjust.m = "bonferroni")

#making a venn diagram
#make a variable for all of the conditions you want to compare
pseq_rel = microbiome::transform(phy, "compositional")
stuff = unique(as.character(meta(phy)$Organism))

#make a for loop to go through each bit of "stuff" one by one and combine identified core taxa into a list
list_core <- c() # an empty object to store information
for (n in stuff){ # for each variable n in stuff
  #print(paste0("Identifying Core Taxa for ", n))
  
  ps.sub <- subset_samples(pseq_rel, stuff== n) # Choose sample from DiseaseState by n
  
  core_m <- core_members(ps.sub, # ps.sub is phyloseq selected with only samples from g 
                         detection = 0.001, # 0.001 in atleast 90% samples 
                         prevalence = 0.10) #prevelence really matters--how much of the sample can it make upt 
  print(paste0("No. of core taxa in ", n, " : ", length(core_m))) # print core taxa identified in each DiseaseState.
  list_core[[n]] <- core_m # add to a list core taxa for each group.
  #print(list_core)
}

plot(venn(list_core))
list_Acer = as.factor(list_core$`Acropora cervicornis`)
list_Apro = as.factor(list_core$`Acropora prolifera`)
list_Apal = as.factor(list_core$`Acropora palmata`)

#trying ancombc
output_combined = ancombc2(data = phy, assay_name = "counts", tax_level = "name",
                           fix_formula = "Organism", rand_formula = NULL,
                           p_adj_method = "fdr", pseudo = 0, pseudo_sens = TRUE,
                           prv_cut = 0.01, lib_cut = 0, s0_perc = 0.05,
                           group = "Organism", struc_zero = TRUE, neg_lb = FALSE,
                           alpha = 0.05, n_cl = 2, verbose = TRUE,
                           global = TRUE, pairwise = TRUE, dunnet = TRUE, trend = TRUE,
                           iter_control = list(tol = 1e-2, max_iter = 20, 
                                               verbose = TRUE),
                           em_control = list(tol = 1e-5, max_iter = 100),
                           lme_control = lme4::lmerControl(),
                           mdfdr_control = list(fwer_ctrl_method = "fdr", B = 100),
                           trend_control = list(contrast = list(matrix(c(1, 0, -1, 1),
                                                                       nrow = 2, 
                                                                       byrow = TRUE),
                                                                matrix(c(-1, 0, 1, -1),
                                                                       nrow = 2, 
                                                                       byrow = TRUE)),
                                                node = list(2, 2),
                                                solver = "ECOS",
                                                B = 100))


res_prim = output_combined$res
res_prim 
df_res_S = res_prim_S %>% dplyr::filter(`diff_OrganismAcropora palmata`) %>%
  dplyr::select(taxon, contains("Site"))
df_fig_res_S = df_res_S %>%
  arrange(desc(`lfc_OrganismAcropora palmata`
  )) %>%
  mutate(direct = ifelse(lfc_Siterb
                         > 0, "Positive LFC", "Negative LFC"))
df_fig_res_S$taxon = factor(df_fig_res_S$taxon, levels = df_fig_res_S$taxon)
df_fig_res_S$direct = factor(df_fig_res_S$direct,
                             levels = c("Positive LFC", "Negative LFC"))
fig_res_S = df_fig_res_S %>%
  ggplot(aes(x = taxon , y = lfc_Siterb, fill = lfc_Siterb)) +
  geom_bar(stat = "identity", width = 0.7, color = "black",
           position = position_dodge(width = 0.4)) +
  geom_errorbar(aes(ymin = lfc_Siterb - se_Siterb, ymax = lfc_Siterb +
                      se_Siterb),
                width = 0.2, position = position_dodge(0.05), color = "black") +
  labs(x = "Prokaryotic Phylum", y = "Log fold change",
       title = "LFC in site rb ", subtitle = "Of ANCOM-BC significant
taxa bias corrected") + scale_fill_viridis_c(option = "plasma") + scale_color_viridis_c(option
                                                                                        = "plasma") +
  theme_bw() +
  theme(legend.position = "none",
        panel.grid.minor.y = element_blank()) + coord_flip()
fig_res_S
